[
  {
    "id": "TASK_001",
    "description": "Identify all hardcoded values across the project (client & server) and plan for their replacement with dynamic data from API/DB (administrator-configurable).",
    "category": "Core System",
    "status": "completed",
    "subTasks": [
      "Scan client-side components for hardcoded prices, rates, options, etc.",
      "Scan server-side logic (if accessible/inferable) for similar hardcoded values.",
      "Define API endpoints or DB structures needed for these dynamic values.",
      "Prioritize critical values (e.g., trading rates, conversion rates) for early replacement.",
      "Refactor client/src/pages/QuickTrade.tsx: Replace hardcoded currentPrice, chartData, orderBookData with API calls. Leverage options to be dynamic (deferred, requires Futures tab implementation).",
      "Refactor client/src/pages/FlashTrade.tsx: Replace hardcoded market info (price, change) and info card statistics with API calls.",
      "Refactor client/src/pages/QuantAI.tsx: Replace hardcoded info card stats and strategy components/details with API calls.",
      "Refactor client/src/components/QuantAIModule.tsx: Use strategies passed via props instead of internal fetch or hardcoded fallbacks.",
      "Refactor client/src/components/CryptoConverter.tsx: Remove hardcoded fallback currency/rate list; ensure API (/api/crypto/rates) is the sole source for supported currencies and their simulated prices (requires backend update).",
      "Refactor client/src/pages/Wallet.tsx: Replace hardcoded coin selection lists in Deposit and Withdrawal forms with API-driven data (/api/admin/supported-coins). Display coin-specific deposit address and QR code from API.",
      "Investigate client/src/pages/Settings.tsx 'Preferences' tab for hardcoded theme options, language options, or other configurable lists and refactor to use API-driven data if necessary."
    ],
    "notes": "This is a foundational task for the simulation-based environment. Identified client-side hardcoded values include: QuickTrade.tsx (currentPrice, chartData, orderBookData, leverages - done for price, rest deferred), FlashTrade.tsx (Market Info cards, Info cards stats - done), QuantAI.tsx (Info cards stats, Strategy Components - done), CryptoConverterPage.tsx/CryptoConverter.tsx (available currencies - done, API is source), Wallet.tsx (available currencies in forms - done), Settings.tsx (potential theme/language options in Preferences tab - pending investigation). Backend work for API data sources (simulated prices, admin-defined lists) is implied and covered in subsequent tasks."
  },
  {
    "id": "TASK_002",
    "description": "Implement backend logic for administrator-driven simulation of Quick Trade market data (price, order book).",
    "category": "Quick Trade",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "notes": "API endpoints for fetching simulated market data, and admin UI for setting this data. Backend schema, storage, and routes implemented."
  },
  {
    "id": "TASK_003",
    "description": "Implement backend logic for administrator-driven leverage options in Quick Trade.",
    "category": "Quick Trade",
    "status": "completed",
    "dependencies": ["TASK_002"],
    "subTasks": [
      "Define database schema for quick_trade_leverage_options (value, label, isActive, etc.).",
      "Implement storage layer functions (CRUD) for leverage options.",
      "Create admin API endpoints (GET, POST, PUT, DELETE) to manage leverage options.",
      "Create a public API endpoint for QuickTrade page to fetch active leverage options.",
      "Develop Admin UI (AdminQuickTradeSettings.tsx) for managing these leverage options.",
      "Integrate selected leverage into Quick Trade simulation backend logic (calculate P&L, display liquidation price, simulate margin call notifications via WebSocket)."
    ],
    "notes": "Admin UI (AdminQuickTradeSettings.tsx) for managing leverage options and client-side QuickTradeModule to select and use leverage via WebSocket for simulated trades (P&L, liquidation price) are implemented."
  },
  {
    "id": "TASK_004",
    "description": "Implement backend logic for administrator-driven simulation of Flash Trade market data (price, volatility) and user-specific win/loss settings, including real-time outcome forcing by admin.",
    "category": "Flash Trade",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "subTasks": [
      "Define/Update database schema: flash_trade_asset_simulation_settings (symbol, basePrice, volatilityPercent, updateIntervalSeconds, isEnabled).",
      "Define/Update database schema: users table with flashTradeOutcome ('win', 'loss', 'default') and flashTradeWinRate (for 'default' if specific user rate is needed, otherwise use platform default).",
      "Define/Update database schema: flashTrades table with preDeterminedOutcome, outcomeForcedByAdmin, forcedOutcome.",
      "Implement storage layer functions (CRUD) for flash_trade_asset_simulation_settings.",
      "Implement storage layer functions to update user's flashTradeOutcome/WinRate and to force flash trade outcome in flashTrades table.",
      "Create admin API endpoints (GET, POST, PUT, DELETE) to manage flash_trade_asset_simulation_settings.",
      "Create admin API endpoints to manage user-specific flash trade win/loss settings.",
      "Develop Admin UI (AdminFlashTradeMarketSettings.tsx) for managing asset simulation settings.",
      "Develop Admin UI (in AdminUsers.tsx) for managing user-specific win/loss settings.",
      "Develop Admin UI (AdminFlashTradeMonitor.tsx) for real-time monitoring of flash trades and forcing outcomes (with 10-sec rule).",
      "Implement WebSocket (server/ws.ts) logic for: Flash Trade price simulation based on admin settings and broadcasting flash_price_update.",
      "Implement WebSocket (server/ws.ts) logic for: Determining preDeterminedOutcome on trade start based on user/platform settings.",
      "Implement WebSocket (server/ws.ts) logic for: Processing expired trades using preDeterminedOutcome or forcedOutcome, and simulated exit prices.",
      "Implement WebSocket (server/ws.ts) logic for: Handling force_flash_trade_outcome message from admin (check 10-sec rule, update DB, notify clients).",
      "Update Client UI (FlashTradeModule.tsx and FlashTrade.tsx) to consume flash_price_update and display final trade results from WebSocket."
    ],
    "notes": "All sub-tasks for Flash Trade admin-driven simulation, user win/loss settings, real-time outcome forcing, and client UI updates are now complete."
  },
  {
    "id": "TASK_005",
    "description": "Quant AI ?ъ옄 濡쒖쭅 諛깆뿏??援ы쁽 (愿由ъ옄 ?ㅼ젙 湲곕컲 ?섏씡瑜? 湲곌컙, ?ъ옄 媛??湲덉븸 踰붿쐞 ?곸슜)",
    "category": "Quant AI",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "subTasks": [
      "Define/Update database schema for quant_ai_settings (strategy_name, duration_days, daily_return_rate, total_return_rate, min_investment, max_investment, is_active).",
      "Define/Update database schema for quant_ai_investments (user_id, strategy_id, investment_amount, start_date, end_date, expected_daily_pnl, expected_total_pnl, actual_pnl, status: active/completed/cancelled).",
      "Implement storage layer functions (CRUD) for quant_ai_settings.",
      "Implement storage layer functions for creating, managing, and completing quant_ai_investments, including calculating daily P&L based on settings.",
      "Create admin API endpoints to manage quant_ai_settings.",
      "Create user-facing API endpoints to list available Quant AI strategies (from quant_ai_settings) and for users to start/manage their investments.",
      "Implement a scheduled task (e.g., cron job or interval in ws.ts or separate worker) to daily update progress of active quant_ai_investments (calculate and record daily P&L, update current_value).",
      "Develop Admin UI (e.g., AdminQuantAISettings.tsx) for managing Quant AI strategies.",
      "Update Client UI (QuantAI.tsx, QuantAIModule.tsx) to fetch strategies and allow investments based on admin settings."
    ],
    "notes": "Backend logic for Quant AI investments, including applying admin-defined parameters for returns, duration, and investment ranges."
  },
  {
    "id": "TASK_006",
    "description": "Implement detailed Flash Trade history for admin view.",
    "category": "Flash Trade",
    "status": "completed",
    "dependencies": ["TASK_004"],
    "notes": "API for fetching all trades (not just active) and UI in 'AdminFlashTrade.tsx'."
  },
  {
    "id": "TASK_007",
    "description": "Implement backend logic for Quant AI investment strategies, daily profit updates, and maturity calculations based on administrator settings.",
    "category": "Quant AI",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "notes": "Refer to 'AdminQuantAI.tsx'. Implement random daily updates (짹0.5%) and maturity bonus (0.5-3% * duration) as per prompt."
  },
  {
    "id": "TASK_008",
    "description": "Add 'Risk Level' to Quant AI strategy definition and management.",
    "category": "Quant AI",
    "status": "completed",
    "dependencies": ["TASK_007"],
    "notes": "API and UI changes in 'AdminQuantAI.tsx'."
  },
  {
    "id": "TASK_009",
    "description": "Implement detailed Quant AI investment history for admin view.",
    "category": "Quant AI",
    "status": "completed",
    "dependencies": ["TASK_007"],
    "notes": "API for fetching all investments and UI in 'AdminQuantAI.tsx'."
  },
  {
    "id": "TASK_010",
    "description": "?ъ슜???뚮┝ ?쒖뒪??媛쒖꽑 - ?뱀젙 ?대깽??諛쒖깮 ???ㅼ떆媛??뚮┝ (WebSocket): ?쒕쾭 痢?`sendToUser` 諛?`createNotification` 濡쒖쭅, ?대씪?댁뼵??痢?`WebSocketProvider` 援ы쁽 ?꾨즺. `server/storage.ts`??Drizzle ORM ????ㅻ쪟 ?⑥븘?덉쓬.",
    "category": "Security",
    "status": "almost_done",
    "details": "User notification system implemented, including WebSocket setup, toast notifications for new messages, and notifications for Quick Trade (order success/failure), deposit/withdrawal status changes, KYC status changes, Quant AI investment updates (start, completion, cancellation, daily profit), and support ticket events (new ticket, new message). WebSocket authentication improved with JWT. Drizzle schema updated for new notification/deposit fields. i18n translations added for all new notifications."
  },
  {
    "id": "TASK_011",
    "name": "Admin Dashboard Enhancement - KYC Management Page",
    "description": "Improve the KYC document management page in the admin dashboard. Implement server-side pagination, filtering (by status, date), sorting, and document preview. Connect to backend APIs for fetching and updating KYC document statuses. Ensure Drizzle schema migrations related to KYC and other recent changes are successfully applied.",
    "status": "done",
    "details": "Created AdminUsersPage.tsx with user list, toggle active, promote to admin. Added client-side routing for /admin/users. Implemented server APIs (GET /api/admin/users, PUT /api/admin/users/:userId/toggle-active, PUT /api/admin/users/:userId/promote) with Zod validation. Improved KYC management API (GET /api/admin/kyc, PUT /api/admin/kyc/:documentId/status) with server-side pagination, filtering, and sorting. Updated client KYC page (AdminKyc.tsx) to use new APIs, implemented pagination, sorting, document preview (opening in new tab), and KYC status update mutations. Added express.static middleware for /uploads. Drizzle migrations successfully generated and applied using Session Pooler due to IPv4 compatibility issues with Direct Connection."
  },
  {
    "id": "TASK_SECURITY_2FA",
    "description": "Implement Two-Factor Authentication (2FA) - global and per-user settings.",
    "category": "Security",
    "status": "done",
    "dependencies": ["TASK_SETTINGS_SECURITY", "TASK_ADMIN_ACCESS_ENHANCEMENTS"],
    "notes": "UI in 'AdminSecuritySettings.tsx' for global, user profile for user-specific (Settings.tsx). Backend for OTP generation, verification, and login flow updated."
  },
  {
    "id": "TASK_012",
    "description": "Implement Session Duration/Management configuration.",
    "category": "Security",
    "status": "done",
    "dependencies": ["TASK_SETTINGS_SECURITY"],
    "notes": "UI in 'AdminSecuritySettings.tsx' and backend logic for dynamic session duration."
  },
  {
    "id": "TASK_013",
    "description": "Implement CAPTCHA configuration and integration.",
    "category": "Security",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_SECURITY"],
    "notes": "Admin UI to enable/disable and select CAPTCHA type (if multiple). Frontend/Backend integration (e.g., on login, registration)."
  },
  {
    "id": "TASK_014",
    "description": "Implement login attempt limit and account lockout settings.",
    "category": "Security",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_SECURITY", "TASK_012"],
    "notes": "Admin UI to set failed login attempt limit and lockout duration. Backend logic to enforce this during login."
  },
  {
    "id": "TASK_015",
    "description": "Implement IP address based access restriction settings.",
    "category": "Security",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_SECURITY"],
    "notes": "Admin UI for IP allow/block lists (countries, specific IPs/CIDRs). Backend middleware to enforce these rules. Assumes DB migration was successful after .env setup."
  },
  {
    "id": "TASK_016",
    "description": "Implement Withdrawal-specific Password Authentication.",
    "category": "Security",
    "status": "completed",
    "notes": "User-side: set/change withdrawal password in Settings.tsx. Withdrawal process in Wallet.tsx: verify this password before submitting request. Admin side: reset option not implemented in this task."
  },
  {
    "id": "TASK_017",
    "description": "Enhance Admin Deposit/Withdrawal pages: detailed info, batch actions, status logs.",
    "category": "Deposit/Withdrawal",
    "status": "in_progress",
    "notes": "Improvements to 'AdminDeposits.tsx' and 'AdminWithdrawals.tsx'."
  },
  {
    "id": "TASK_018",
    "description": "Enhance 'AdminSupportedCoins.tsx': Delete coin, Network Type, Min/Max Deposit, Max Withdrawal, Fee as Fixed/Percent, Deposit Fee, Confirmation Thresholds.",
    "category": "Deposit/Withdrawal",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "notes": "Significant updates to 'AdminSupportedCoins.tsx' and corresponding backend API."
  },
  {
    "id": "TASK_019",
    "description": "Implement mandatory transfer screenshot upload for deposits.",
    "category": "Deposit/Withdrawal",
    "status": "completed",
    "notes": "Frontend UI in 'Wallet.tsx' (user side) and backend to handle file upload, link to deposit request."
  },
  {
    "id": "TASK_020",
    "description": "Define and implement VIP Membership Levels & Benefits.",
    "category": "Membership",
    "status": "completed",
    "dependencies": ["TASK_ADMIN_USERS_ENHANCEMENTS"],
    "subTasks": [
      "Admin UI to define VIP levels (1-5), names, upgrade conditions (e.g., cumulative volume).",
      "Admin UI to set benefits per level (trading fee discounts, withdrawal priority, etc.).",
      "Backend logic for auto-upgrade and applying benefits.",
      "Frontend display of VIP level, badges, and benefits to users."
    ]
  },
  {
    "id": "TASK_021",
    "description": "Enhance Admin Dashboard: Accurate stats, pending request links, real-time trade graph.",
    "category": "Admin Dashboard",
    "status": "completed",
    "dependencies": ["TASK_002", "TASK_004", "TASK_007"],
    "notes": "Updates to 'AdminDashboard.tsx'. Trade graph to use simulated data."
  },
  {
    "id": "TASK_022",
    "description": "Implement Admin Notification Center for critical events.",
    "category": "Admin Dashboard",
    "status": "completed",
    "notes": "Real-time UI component for admin layout."
  },
  {
    "id": "TASK_023",
    "description": "Implement Quick Access Toolbar for admins.",
    "category": "Admin Dashboard",
    "status": "completed",
    "notes": "UI component in admin layout."
  },
  {
    "id": "TASK_SETTINGS_GENERAL",
    "description": "Consolidate and enhance general platform settings ('AdminSettings.tsx' & 'AdminPlatformSettings.tsx').",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "notes": "Aim for a unified, API-driven settings management. This might be a parent task for more specific setting features."
  },
  {
    "id": "TASK_SETTINGS_FLASH_TRADE_DETAILS",
    "description": "Ensure Flash Trade duration/profit/min-max settings are managed via the unified settings interface.",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL", "TASK_004"],
    "notes": "Coordinate with 'AdminFlashTrade.tsx' to avoid redundancy. Settings should drive simulation."
  },
  {
    "id": "TASK_SETTINGS_QUANT_AI_DETAILS",
    "description": "Ensure Quant AI strategy parameters (duration, rates, min/max investment) are managed via the unified settings interface.",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL", "TASK_007"],
    "notes": "Coordinate with 'AdminQuantAI.tsx'. Settings should drive simulation."
  },
  {
    "id": "TASK_SETTINGS_EMAIL_TEMPLATES",
    "description": "Implement Email Template editor (WYSIWYG/HTML, variables, test send).",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL"],
    "notes": "Requires significant UI work and backend for template storage/rendering."
  },
  {
    "id": "TASK_SETTINGS_API_KEYS",
    "description": "Implement API Key management for external integrations.",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL"],
    "notes": "CRUD for API keys, permissions assignment."
  },
  {
    "id": "TASK_SETTINGS_SYSTEM_HEALTH",
    "description": "Implement System Health & Logs viewer (basic).",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL"],
    "notes": "Display server status, DB connection, error log snippets."
  },
  {
    "id": "TASK_SETTINGS_BACKUP_RESTORE",
    "description": "Implement Backup & Restore UI (trigger backend scripts).",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL"],
    "notes": "UI to schedule/trigger backups, list restore points."
  },
  {
    "id": "TASK_SETTINGS_APPEARANCE",
    "description": "Implement Appearance settings (logo, favicon, theme colors, custom CSS/JS).",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL"],
    "notes": "File uploads for logo/favicon, color pickers, text areas for CSS/JS."
  },
  {
    "id": "TASK_SETTINGS_SECURITY",
    "description": "Ensure all security-related configurations (Password Policy, 2FA, Session, CAPTCHA, IP Whitelist, Country Restrict) are manageable via unified settings.",
    "category": "Settings Management",
    "status": "completed",
    "dependencies": ["TASK_SETTINGS_GENERAL"],
    "notes": "This is a parent task for specific security settings implementation (TASK_010 to TASK_014)."
  },
  {
    "id": "TASK_SUPPORT_ENHANCEMENTS",
    "description": "Enhance Support Chat: Ticket priority, merge duplicates, internal notes, canned responses, reporting, FAQ, chat settings.",
    "category": "Support Chat",
    "status": "completed",
    "notes": "Major updates to 'AdminSupportChat.tsx' and backend."
  },
  {
    "id": "TASK_BONUS_ENHANCEMENTS",
    "description": "Enhance Bonus Programs: Max bonus for first deposit, detailed promo code management, advanced loyalty program features.",
    "category": "Bonus Programs",
    "status": "completed",
    "notes": "Updates to 'AdminBonusManagement.tsx' and backend."
  },
  {
    "id": "TASK_ADMIN_ACCESS_ENHANCEMENTS",
    "description": "Enhance Admin Access: Edit admin, password reset, per-admin 2FA.",
    "category": "Admin Access & RBAC",
    "status": "completed",
    "notes": "Updates to 'AdminAccess.tsx'."
  },
  {
    "id": "TASK_RBAC_IMPLEMENTATION",
    "description": "Implement full Role-Based Access Control (RBAC): Custom roles, assign permissions to roles, assign roles to admins.",
    "category": "Admin Access & RBAC",
    "status": "completed",
    "dependencies": ["TASK_ADMIN_ACCESS_ENHANCEMENTS"],
    "notes": "Major updates to 'AdminAccess.tsx' structure and backend logic. Correct 'allowedTradingTypes' bug."
  },
  {
    "id": "TASK_SERVER_SIDE_SIMULATION_CORE",
    "description": "Refactor/Implement server-side core simulation engine for all trading activities based on admin settings.",
    "category": "Core System",
    "status": "completed",
    "dependencies": ["TASK_001"],
    "notes": "This is a crucial backend task that underpins Quick Trade, Flash Trade, and Quant AI simulations."
  }
] 